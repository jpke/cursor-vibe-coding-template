---
description: Rules for project workflows including Git, Taskmaster, Memory MCP, and Context7 MCP.
globs: "**/*"
alwaysApply: true
---

- **Template Setup Workflow**:
  - **Project Initialization**: When a user has cloned this template into a new project folder, guide them to:
    1. Copy `.cursor/.mcp.json.example` to `.cursor/mcp.json` and configure with their API keys
    2. Optionally copy `.env.example` to `.env` only if they plan to use TaskMaster CLI (not needed for MCP workflow)
    3. Remove any template-specific content (like this README) and customize for their project
  - **Clarify Configuration**: Make clear that `.env` is optional and only needed for CLI usage, not the recommended MCP workflow
  - **Environment File Distinction**:
    - **Template `.env.example`**: Contains TaskMaster CLI configuration (ANTHROPIC_API_KEY, PERPLEXITY_API_KEY, etc.)
    - **Project `.env`**: Will contain application-specific configuration (database URLs, app API keys, etc.)
    - **Never mix these**: TaskMaster configuration is separate from project application configuration
    - **When helping with project `.env`**: Focus on application needs, not TaskMaster CLI configuration

- **Memory MCP Workflow**:
  - **User Confirmation Required**: Before creating, updating, or deleting any entities or relationships in the Memory MCP's knowledge graph, I must first explain what I intend to do and ask for your explicit confirmation.

- **Context7 MCP Workflow**:
  - **Purpose**: Use Context7 MCP to fetch current, accurate library documentation and implementation examples during development tasks.
  - **When to Use Context7 MCP**:
    1. **Before implementing features with specific libraries**: Always check current documentation and best practices
    2. **When encountering library-specific errors**: Get up-to-date troubleshooting information and API changes
    3. **For version-specific guidance**: When working with particular versions of libraries that may have breaking changes
    4. **When user asks about library features**: Provide current information rather than potentially outdated training data
    5. **During code reviews**: Verify that implementations follow current library conventions
    6. **For implementation examples**: Get real-world usage patterns and code samples
  - **Required Two-Step Process**:
    1. **First**: Use `mcp_context7_resolve-library-id` to convert library name (e.g., "react", "nextjs") to Context7-compatible ID
    2. **Then**: Use `mcp_context7_get-library-docs` with the resolved ID to fetch documentation
  - **Best Practices**:
    - Always resolve library ID first - never skip this step
    - Use `topic` parameter to focus on specific areas (e.g., "hooks", "routing", "authentication")
    - Adjust `tokens` parameter based on complexity (default 10000, increase for comprehensive docs)
    - Combine with `research` tool when Context7 doesn't have the specific library
  - **Example Usage Triggers**:
    - "How do I implement authentication with NextJS?" → resolve "nextjs" → get docs with topic "authentication"
    - "I'm getting errors with React hooks" → resolve "react" → get docs with topic "hooks"
    - "Show me how to use Prisma with TypeScript" → resolve "prisma" → get docs with increased tokens
  - **Integration with Development Flow**:
    - Use Context7 MCP early in task implementation planning
    - Reference retrieved documentation in code comments when using library-specific patterns
    - Update Taskmaster subtasks with Context7 findings for future reference

- **Taskmaster Workflow**:
  - **PRD as GitHub Issue**:
    1. After generating a Product Requirements Document (PRD), I will work with you to validate its contents.
    2. Once you accept the PRD, I will create a GitHub Issue in the project's repository containing the full text of the PRD.
    3. This GitHub Issue will serve as the single source of truth for the project's requirements.
    4. **DELETE the local PRD file** (`.taskmaster/docs/*.md`) immediately after creating the GitHub Issue to prevent confusion and ensure the GitHub Issue remains the authoritative version.
  - **Task Generation Trigger**: I will only generate tasks from the PRD Issue after you explicitly tell me to "start working on the PRD" or give a similar instruction.
  - **Task Confirmation**: After Taskmaster generates tasks, I must confirm with you which task to begin work on *before* executing any of them.

- **Git Initialization Workflow**:
  - When you request to "initialize git repo", I will perform the following steps:
    1.  Initialize a local Git repository (`git init`).
    2.  Create a `.gitignore` file with at least the following entries:
        ```
        # Environment & Configuration
        .env
        .cursor/mcp.json

        # Taskmaster & AI
        specstory/
        .taskmaster/tasks/

        # Dependencies
        node_modules/
        venv/
        ```
    3.  Use the **GitHub CLI** (not MCP server) to create a new **private** remote repository on GitHub:
        ```bash
        gh repo create --private --enable-issues --clone=false
        ```
    4.  Create a repository-scoped GitHub Personal Access Token using the GitHub CLI:
        ```bash
        gh auth token --hostname github.com --scopes "issues:write,contents:read,metadata:read" --repo-specific
        ```
    5.  Update the `.cursor/mcp.json` file to use the new scoped GitHub PAT in the GitHub MCP server configuration:
        ```json
        "github": {
          "url": "https://api.githubcopilot.com/mcp/",
          "headers": {
            "Authorization": "Bearer <new_scoped_pat>"
          }
        }
        ```
    6.  Add the new remote to the local repository, stage all initial files, and push the first commit to the `main` branch:
        ```bash
        git remote add origin git@github.com:username/repo-name.git  # Use SSH format for authentication
        git add .
        git commit -m "feat: initial project template setup"
        git push -u origin main
        ```

- **Git CLI Best Practices**:
  - **Always use SSH format for git remotes** (`git@github.com:user/repo.git`) rather than HTTPS format to leverage SSH key authentication instead of token-based authentication
  - **CRITICAL: Always append `| cat` to commands that use pagers** to prevent interactive paging that requires manual exit with `:q`. This is MANDATORY for:
    - `git log` commands: `git log --oneline -5 | cat`
    - `git show` commands: `git show HEAD | cat`
    - `git diff` commands: `git diff | cat`
    - `gh repo view` commands: `gh repo view | cat`
    - `gh pr view` commands: `gh pr view | cat`
    - `gh issue view` commands: `gh issue view | cat`
    - `man` commands: `man git | cat`
    - Any command that might output more than a screen's worth of content
  - **Rule Exception**: Only omit `| cat` when you specifically need interactive features (like `git add -p` for patch mode)

- **Git Branch Protection Workflow**:
  - **NEVER commit directly to main branch** - All changes must go through pull request process
  - **Required Workflow for All Changes**:
    1. **Create Feature Branch**: `git checkout -b feature/descriptive-name` or `git checkout -b fix/issue-description`
    2. **Make Changes**: Implement your changes on the feature branch
    3. **Commit Changes**: `git add .` and `git commit -m "descriptive message"`
    4. **Push Branch**: `git push -u origin feature/descriptive-name`
    5. **Open Pull Request**: `gh pr create --title "Title" --body "Description"` or use GitHub web interface
    6. **Merge via PR**: Never use `git push origin main` directly
  - **Branch Naming Conventions**:
    - `feature/feature-name` for new features
    - `fix/bug-description` for bug fixes
    - `docs/documentation-update` for documentation changes
    - `refactor/component-name` for refactoring work
    - `chore/maintenance-task` for maintenance tasks
  - **Before Starting Work**:
    ```bash
    git checkout main
    git pull origin main
    git checkout -b feature/your-feature-name
    ```
  - **Emergency Exception**: Only in true emergencies (production down, security fix) may direct commits to main be considered, and they must be followed immediately by a retroactive PR for review
  - **Pull Request Requirements**:
    - Descriptive title and body explaining the changes
    - Link to related issues when applicable
    - Ensure all CI checks pass before merging
    - Request review from team members when working in team environments
