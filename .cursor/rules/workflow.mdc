---
description: Rules for project workflows including Git, Taskmaster, and Memory MCP.
globs: "**/*"
alwaysApply: true
---

- **Template Setup Workflow**:
  - **Project Initialization**: When a user has cloned this template into a new project folder, guide them to:
    1. Copy `.cursor/.mcp.json.example` to `.cursor/mcp.json` and configure with their API keys
    2. Optionally copy `.env.example` to `.env` only if they plan to use TaskMaster CLI (not needed for MCP workflow)
    3. Remove any template-specific content (like this README) and customize for their project
  - **Clarify Configuration**: Make clear that `.env` is optional and only needed for CLI usage, not the recommended MCP workflow
  - **Environment File Distinction**: 
    - **Template `.env.example`**: Contains TaskMaster CLI configuration (ANTHROPIC_API_KEY, PERPLEXITY_API_KEY, etc.)
    - **Project `.env`**: Will contain application-specific configuration (database URLs, app API keys, etc.)
    - **Never mix these**: TaskMaster configuration is separate from project application configuration
    - **When helping with project `.env`**: Focus on application needs, not TaskMaster CLI configuration

- **Memory MCP Workflow**:
  - **User Confirmation Required**: Before creating, updating, or deleting any entities or relationships in the Memory MCP's knowledge graph, I must first explain what I intend to do and ask for your explicit confirmation.

- **Taskmaster Workflow**:
  - **PRD as GitHub Issue**:
    1. After generating a Product Requirements Document (PRD), I will work with you to validate its contents.
    2. Once you accept the PRD, I will create a GitHub Issue in the project's repository containing the full text of the PRD.
    3. This GitHub Issue will serve as the single source of truth for the project's requirements.
    4. **DELETE the local PRD file** (`.taskmaster/docs/*.md`) immediately after creating the GitHub Issue to prevent confusion and ensure the GitHub Issue remains the authoritative version.
  - **Task Generation Trigger**: I will only generate tasks from the PRD Issue after you explicitly tell me to "start working on the PRD" or give a similar instruction.
  - **Task Confirmation**: After Taskmaster generates tasks, I must confirm with you which task to begin work on *before* executing any of them.

- **Git Initialization Workflow**:
  - When you request to "initialize git repo", I will perform the following steps:
    1.  Initialize a local Git repository (`git init`).
    2.  Create a `.gitignore` file with at least the following entries:
        ```
        # Environment & Configuration
        .env
        .cursor/mcp.json

        # Taskmaster & AI
        specstory/
        .taskmaster/tasks/

        # Dependencies
        node_modules/
        venv/
        ```
    3.  Use the **GitHub CLI** (not MCP server) to create a new **private** remote repository on GitHub:
        ```bash
        gh repo create --private --enable-issues --clone=false
        ```
    4.  Create a repository-scoped GitHub Personal Access Token using the GitHub CLI:
        ```bash
        gh auth token --hostname github.com --scopes "issues:write,contents:read,metadata:read" --repo-specific
        ```
    5.  Update the `.cursor/mcp.json` file to use the new scoped GitHub PAT in the GitHub MCP server configuration:
        ```json
        "github": {
          "url": "https://api.githubcopilot.com/mcp/",
          "headers": {
            "Authorization": "Bearer <new_scoped_pat>"
          }
        }
        ```
    6.  Add the new remote to the local repository, stage all initial files, and push the first commit to the `main` branch:
        ```bash
        git remote add origin git@github.com:username/repo-name.git  # Use SSH format for authentication
        git add .
        git commit -m "feat: initial project template setup"
        git push -u origin main
        ```

- **Git CLI Best Practices**:
  - **Always use SSH format for git remotes** (`git@github.com:user/repo.git`) rather than HTTPS format to leverage SSH key authentication instead of token-based authentication
  - **Use `| cat` suffix for commands that might use a pager** (like `gh repo view | cat`, `git log | cat`) to prevent interactive paging that requires manual exit with `:q`
